Command Line Basics
(Intro to Programming tools for Non-Programmers)
Zach Vowell
Russ White

Kennedy Library
September 18, 2020
guides.lib.calpoly.edu/DPL
slides at: http://bit.ly/cli_workshopF2020

Thanks to The Carpentries for some slide content
Thanks to AstroBioMike for Binder configuration


Instructor introductions

2

Hello everyone, my name is Zach Vowell, and I am the digital archivist here a the library. In my work as a digital archivist, I work with a lot of data and digital files, and I have found many excellent uses of the command line for them. I’m excited to be able to teach some basic command line skills to you all today, so that you will be able to use it too. By the end of this very brief workshop, you’ll be able to create and write in a text file entirely within the command line interface-- no Word, no GoogleDocs, just the command line!

My name is Russ White...
	
3


4

One way that people talk about command-line interfaces is as a shell, or the outermost layer of the computer. We’ll be using a Bash shell today, specifically Mac’s Terminal program. The name terminal comes from the idea that the Terminal application is emulating a video terminal connected to the computer.


5


6
One way that people talk about command-line interfaces is as a shell, or the outermost layer of the computer. We’ll be using a Bash shell today, specifically Mac’s Terminal program. The name terminal comes from the idea that the Terminal application is emulating a video terminal connected to the computer.


7
There are different kinds of command line interfaces and shells, but Bash is the most common, as it’s used in both Mac and Linux systems. Before really getting going, we’ll start by covering these 3 topics to get everyone oriented.


8
Now you should have a window with a white background, a line of text, and a blinking cursor underneath the line of text

This is the prompt: the shell is asking you what you want to do.

 
9
[from https://swcarpentry.github.io/shell-novice/02-filedir/index.html]
The part of the operating system responsible for managing files and directories is called the file system. It organizes our data into files, which hold information, and directories (also called ‘folders’), which hold files or other directories.
Several commands are frequently used to create, inspect, rename, and delete files and directories. To start exploring them, we’ll go to our open shell window.
First let’s find out where we are by running a command called pwd (which stands for ‘print working directory’). Directories are like places - at any time while we are using the shell we are in exactly one place, called our current working directory. Commands mostly read and write files in the current working directory, i.e. ‘here’, so knowing where you are before running a command is important. pwd shows you where you are:
Here, the computer’s response is /home/jovyan, which is user jovyan’s home directory:


10
/home/jovyan/photos
To understand what a ‘home directory’ is, let’s have a look at how the file system as a whole is organized. For the sake of this example, we’ll be illustrating the filesystem the shell that we just launched. After this illustration, you’ll be learning commands to explore the filesystem on your own computer. If you use another shell, the file system will be constructed in a similar way, but it may not be exactly identical.
On virtual computer that we just launched, the filesystem looks like this:
At the top is the root directory that holds everything else. We refer to it using a slash character, /, on its own; this is the leading slash in /home/jovyan.
Inside that directory are several other directories: bin (which is where some built-in programs are stored), data (for miscellaneous data files), usr (where users’ personal directories are located), tmp (for temporary files that don’t need to be stored long-term), and so on.
We know that our current working directory /home/jovyan is stored inside /home because /home is the first part of its name. Similarly, we know that /home is stored inside the root directory / because its name begins with /.
Underneath /home, we find one directory for each user with an account on this virtual online machine. There’s only jovyan now, but we could creat others if wanted. The folder /home/jovyan  is known as user jovyan’s home directory.
Typically, when you open a new command prompt you will be in your home directory to start.

Image credit (modified): https://www.google.com/url?sa=i&url=http%3A%2F%2Fonestep91.blogspot.com%2F2013%2F07%2Fabout-linux-file-system-structure.html&psig=AOvVaw3lCARDtzXFamq-2cWsOxid&ust=1600384769350000&source=images&cd=vfe&ved=0CA0QjhxqFwoTCLD_hbPr7usCFQAAAAAdAAAAABAD



11
Now let’s learn the command that will let us see the contents of our own filesystem. We can see what’s in our home directory by running ls:

(Again, your results may be slightly different depending on your operating system and how you have customized your filesystem.)

ls prints the names of the files and directories in the current directory. 



12
We can make its output more comprehensible by using the -F option (also known as a switch or a flag) , which tells ls to classify the output by adding a marker to file and directory names to indicate what they are:
a trailing / indicates that this is a directory
@ indicates a link
* indicates an executable
Depending on your default options, the shell might also use colors to indicate whether each entry is a file or directory.
Here, we can see that our home directory contains both files and sub-directories. Any names in your output that don’t have a classification symbol, are plain old files.
If your screen gets too cluttered, you can clear your terminal using the clear command. You can still access previous commands using ↑ and ↓ to move line-by-line, or by scrolling in your terminal.


 
13
ls is the command, with an option -F and an argument /. We’ve already encountered options (also called switches or flags) which either start with a single dash (-) or two dashes (--), and they change the behaviour of a command. Arguments tell the command what to operate on (e.g. files and directories). Sometimes options and arguments are referred to as parameters. A command can be called with more than one option and more than one argument: but a command doesn’t always require an argument or an option.

Each part is separated by spaces: if you omit the space between ls and -F the shell will look for a command called ls-F, which doesn’t exist.

Putting all that together, our command above gives us a listing of files and directories in the root directory /. An example of the output you might get from the above command is given in the example:


14
Also, capitalization can be important. For example, ls -s will display the size of files and directories alongside the names, while ls -S will sort the files and directories by size, as shown in this example:


15
ls --help
man ls
man pages (manual pages) on the web
Include in your search for the command: “unix man page”
ls has lots of other options. There are two common ways to find out how to use a command and what options it accepts:
Depending on your environment you might find that only one of these works (either man or --help, eg. man works for macOS)
In this notebook environment, man doesn’t seem to be working, so we will focus on ls --help

Also, you can always search the internet for help. Most if not all man pages are available there. When using internet search, including the phrase unix man page in your search query will help to find relevant results.
GNU provides links to its manuals including the core GNU utilities, which covers many commands introduced within this lesson.


16
ls -j
What happens if you try to use an option (flag) that is not supported?  ls and other commands will usually print an error message similar to:

Syntax - exploring more ls flags
You can also use two options at the same time. What does the command ls do when used with the -l option? What about if you use both the -l and the -h option?

Some of its output is about properties that we do not cover in this lesson (such as file permissions and ownership), but the rest should be useful nevertheless.


17
Solution: The -l option makes ls use a long listing format, showing not only the file/directory names but also additional information such as the file size and the time of its last modification. If you use both the -h option and the -l option, this makes the file size ‘human readable’, i.e. displaying something like 4.0K instead of 4096.

Syntax - exploring more ls flags
By default ls lists the contents of a directory in alphabetical order by name. The command ls -t lists items by time of last change instead of alphabetically. The command ls -r lists the contents of a directory in reverse order. 

Which file is displayed last when you combine the -t and -r flags? 

Hint: You may need to use the -l flag to see the last changed dates.

18
The most recently changed file is listed last when using -rt. This can be very useful for finding your most recent edits or checking to see if a new output file was written.

Navigating the computer’s file system
ls -F workshop-resources
ls -F workshop-resources/lit

 
19
Not only can we use ls on the current working directory, but we can use it to list the contents of a different directory. Let’s take a look at our workshop-resources directory by running ls -F workshop-resources, i.e., the command ls with the -F option and the argument workshop-resources. The argument workshop-resources tells ls that we want a listing of something other than our current working directory:

Now that we know the lit directory is located in our workshop-resources directory, we can do two things.
First, we can look at its contents, using the same strategy as before, passing a directory name to ls:


 
20
Second, we can actually change our location to a different directory, so we are no longer located in our home directory.
The command to change locations is cd followed by a directory name to change our working directory. cd stands for ‘change directory’, which is a bit misleading: the command doesn’t change the directory, it changes the shell’s idea of what directory we are in. The cd command is akin to double clicking a folder in a graphical interface to get into a folder.
Let’s say we want to move to the workshop-resources directory we saw above. We can use the command to get there:




21
Inside this workshop-resources folder, among other things, is a plain text copy of War and Peace. This command will give you the total number of words and characters from this edition of War and Peace.

wc is the command
-wm is what’s known as an option, or an argument. It modifies the behavior or output of the command, and most commands have several options.
war-and-peace.txt is the file that wc is acting on. Otherwise known as the “input file”.

What do you see in the response from this command?


22



23
For the next exercise, let’s try grabbing a JPEG image from the library’s Online Archive. To do this, we’ll be using the command curl. For this command, you don’t need to cd anywhere. Just type in the command that you see here on the slide, and press Enter. After the shell returns to a prompt, see if a new JPEG has appeared on your computer’s Desktop. Try opening up the JPEG just to confirm it’s real!
As a side note, this particular command is relying on what’s known as a REST API in the Online Archive. Is anyone familiar with that term? A website doesn’t need a REST API to use curl, but curl is a great way to test out APIs and make sure you know who they work.
curl is a command that captures URLs
https://digital.lib.calpoly.edu/islandora/rest/v1/object/rekl:5678/datastream/JPG is the URL that curl will capture
> is one way in Bash to redirect standard output to another output (like a file)
~palm.jpg is the directory path and file that you are re-directing your output to. In this case, we’re creating a new file, and so we can name this file anything we want. I chose “palm.jpg” because the image depicts Palm Street in San Luis Obispo during the 1930s, and because it is a JPEG file, but you could give it any name you want in the shell and it will show up that way on your desktop.




24
No: . stands for the current directory.
No: / stands for the root directory.
No: Amanda’s home directory is /Users/amanda.
No: this goes up two levels, i.e. ends in /Users.
Yes: ~ stands for the user’s home directory, in this case /Users/amanda.
No: this would navigate into a directory home in the current directory if it exists.
Yes: unnecessarily complicated, but correct.
Yes: shortcut to go back to the user’s home directory.
Yes: goes up one level.



25
No: there is a directory backup in /Users.
No: this is the content of Users/thing/backup, but with .. we asked for one level further up.
No: see previous explanation.
Yes: ../backup/ refers to /Users/backup/.


26
No: pwd is not the name of a directory.
Yes: ls without directory argument lists files and directories in the current directory.
Yes: uses the absolute path explicitly.


27


28


29



30


31



32
We need to change the permissions on the script file so that we can execute it. Sometimes you’ll need administrator privileges to run this chmod command, but as long as you’re in the home directory, you should be able to use it.

chmod and file permissions



33
The script we will be using is available on github: https://github.com/welcheb/pptx2txt.sh

Once you’re in the “bash-script” folder, and use ls, you’ll see there is a file called pptx2txt.sh. That is the Bash script file. There’s also a Powerpoint file called TuckerPresentation. If you type in this first line here, you will run the script on the Powerpoint file, and it will extract the text from the Powerpoint file.

./ is a Bash convention for saying you want to execute a program (script) that is stored in your current directory
pptx2txt is the name of this particular Bash script
.sh is the conventional file extension for a shell script
report-comments.pptx is the name of the file that will be used as input for the shell script



Now that we’ve seen the script working, let’s take a quick look at what it’s made of
Variables, for loops, if/then conditionals

Credits:
Slide decks are from MS0191, Bag bd-ms191_bag001 
[need to add in identifiers]
Creator: Peter Raimondi
File names have been altered from the original



34



35

So, that’s a little messy, right? It’s cool that you get all that text, but it all sort of runs together. Let’s try adding an option that this script provides, AND add another file to the input, AND redirect the output to a text file.

./pptx2txt.sh same as last time is executing the shell script from the folder we’re located in
-v is an option provided by the script which tells the script to output the file name and the slide headings along with the text
report-comments.pptx is the name of one input file
report-short.pptx is the name of a second input file
> as we’ve seen before is way to redirect the output.
pptText.txt is the name of new file we’re creating with this command which will receive the output of the command.

Now that we’ve seen the script working, let’s take a quick look at what it’s made of
Variables, for loops, if/then conditionals

Credits:
Slide decks are from MS0191, Bag bd-ms191_bag001 
[need to add in identifiers]
Creator: Peter Raimondi
File names have been altered from the original



36




37
Input: 
numerical identifier in first column
number with no am/pm (example: 11)

Output doesn’t seem to make sense?

A Python Script 

.py extension of text file

edit with IDLE or txt

Built-in to the OS

Execute from Command Line
 

38



39
For the next exercise, we’ll be returning to more text files obtained from Project Gutenberg. In this case, it’s the tragedies of Shakespeare. First, cd into the “tragedies” folder inside of workshop-resources. Then type this command.
find is a command that locates files, but then allows you to do things to the files while you’re at it
. is telling find to look in the present working directory. Which means you could run find from anywhere as long as you know how to write the location (the path).
-name is an option of find which means we’ll be looking for files based on their names. This also implies that find can look for files in ways other than their names.
‘*.txt’ is a value for the -name option, which is telling find  to look for any file that ends in .txt The asterisk is known as a wildcard, and here it means any file would match, no matter what comes before it, if it ends in .txt
-exec is another option of find that is quite powerful. It allows find to bring up any other Bash command to perform an action on the files it matches.
cat is a Bash command which can combine files or just print them to standard output. Here we are using it to combine the contents of the files that were found by find . -name ‘*.txt’
{} \ is a convention that tells -exec cat to act on each instance found from the command find . -name ‘*.txt’ 
; is a convention used to end the -exec option of find. Without the semicolon, find would go on thinking you were still using -exec.
> as we have seen, this character re-directs the output of the commands up to this point.
~/nameOfYourNewFolder/literature.txt is the file that we will hold the combined text of everything in the “tragedies” folder that has a .txt file extension.



40
A to BONUS question: wc -wm ~/Desktop/CommandLineWorkshop/literature.txt --- try to get rid of illegal byte sequence!






41
Here is a detailed explanation of the parts of this command.
find 
.  [Which means you could run find from anywhere as long as you know how to write the location (the path).]
-name  [This also implies that find can look for files in ways other than their names.]
‘*.txt’ 
-exec [is another option of find that is quite powerful.] 
cat  [Here we are using it to combine the contents of the files that were found by find . -name ‘*.txt’]
{} \ 
;  [Without the semicolon, find would go on thinking you were still using the -exec option]
> 
~/Desktop/CommandLineWorkshop/literature.txt


42


43


44


45


46



47


48


49


50



51


52



53
